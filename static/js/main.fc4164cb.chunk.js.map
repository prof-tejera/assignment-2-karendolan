{"version":3,"sources":["components/documentation/DocumentComponent.js","utils/constants.js","utils/useIntervalHelper.js","context/TimerProvider.js","components/generic/Loading.js","shared/COLOR.js","components/generic/Button.js","utils/HelperFunctions.js","components/generic/DisplayTime.js","components/generic/Input.js","components/generic/DisplayRounds.js","components/generic/ButtonPanel.js","components/generic/Panel.js","views/DocumentationView.js","utils/useResetCallback.js","utils/useEndedEffect.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","propDocs","component","title","map","doc","prop","description","type","defaultValue","STATUS","RUNNING_STATUS","useIntervalHelper","workSecs","restSecs","rounds","curSec","curRound","isCountASC","isWorking","isResting","setStatus","isCountDown","setCurSec","setCurRound","end","status","getCurEndSecs","interval","useRef","savedCallback","isInIntervaleState","current","c","r","console","error","_stopInterval","clearInterval","startInterval","setInterval","stopInterval","TimerContext","createContext","TimerProvider","children","useState","setWorkSecs","setRestSecs","setRounds","wasResting","setWasResting","setIsCountASC","isPaused","isEnded","Provider","value","work","pause","resetStart","resetAll","isRunning","includes","isReset","isInRestingContext","getCurStartSecs","primaryColor","sizeMapping","small","medium","large","Dot","span","props","size","color","DotGroup","Loading","sizeMapped","docs","key","defaultProps","COLOR","primary0","primary1","primary2","primary3","primary4","primaryLightest","secondary10","secondary11","secondary12","secondary13","secondary14","secondary20","secondary21","secondary22","secondary23","secondary24","GENERIC","BUTTON_COLORS","active","background","inactive","DISPLAY_TIME","label","DISPLAY_ROUNDS","resting","INPUT","DEFAULT","LABEL","PANEL","DISPLAY","default","ready","CONTROLS","xlarge","ButtonStyled","button","activeKey","Button","text","onClick","actve","String","getHmsDisplayFromSecs","secs","hr","Math","floor","getHrsFromSecs","slice","min","getMinRemainderFromSecs","sec","getSecRemainerFromSecs","fontSizeMap","Label","DisplayTime","seconds","textSize","InputContainer","InputStyled","input","LabelStyled","Input","onChange","name","maxNum","htmlFor","id","max","autocomplete","placeholder","undefined","Round","RoundGroup","DisplayRounds","useContext","dots","Array","from","e","i","isCurRound","ButtonPanel","resetButtonFunc","workButtonFunc","PanelStyle","TitleContainer","InputsContainer","DisplayContainer","bg","ControlsContainer","Panel","timerTitle","inputs","displayTimes","displayRound","displayColorKey","DocList","components","CurrComp","useResetCallback","resetCallback","useEffect","useEndedEffect","Stopwatch","event","target","num","parseInt","Countdown","XY","Tabata","Timers","TimerContainer","Timer","MenuContainer","App","curTimer","setCurTimer","timerElems","C","timer","chooseTimer","StyledLink","Link","StyledNav","to","path","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc4164cb.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\n\nconst Documentation = styled.table`\n  flex-grow: 1;\n`;\n\nconst DocumentComponent = ({propDocs, component, title}) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc) => {\n              return (\n                  <tr key={doc.prop}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n}\n\nexport default DocumentComponent;\n","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\nexport const STATUS = {\n  RESET: 'reset',\n  COUNTDOWN: 'countdown',\n  WORKING: 'working',\n  RESTING: 'resting',\n  PAUSED: 'paused',\n  ENDED: 'ended',\n};\n\nexport const RUNNING_STATUS = [\n  STATUS.COUNTDOWN,\n  STATUS.WORKING,\n  STATUS.RESTING,\n];\n","import { useRef } from 'react';\n// Import helper\nimport { STATUS } from '../utils/constants';\n/**\n * The Iterval Helper is used by the TimerProvider\n * It iterates over the possible timer state changes\n * after each iterval, until it hits the end state.\n * The Interval timer sets context states when moving over\n * boundaries of rounds or between work and rest states.\n * @returns {startInterval, stopInterval} - the 2 APIs for this helper\n */\nconst useIntervalHelper = ({\n  // Range parameters to determine next step\n  workSecs,\n  restSecs,\n  rounds,\n  // The current state of the count and round\n  curSec,\n  curRound,\n  // Indicates which way to move the counter next\n  isCountASC,\n  // State check function to test if currently in rest or work state\n  isWorking,\n  isResting,\n  isCountDown,\n  // Change state functions\n  setStatus,\n  setCurSec,\n  setCurRound,\n  // The termination function\n  status,\n  end,\n  // The current terminating number\n  getCurEndSecs,\n}) => {\n  // Initialize the 2 ref references\n  const interval = useRef(null);\n  const savedCallback = useRef(null);\n  const isInIntervaleState = isResting() || isWorking();\n\n  // This function does the work neede between each interval\n  // to ensure the correct state is set on the interval increment.\n  const callback = () => {\n    // Short circuit when not in an interval state\n    if (!isInIntervaleState) return;\n    // If curSec is at curEndSecs, do a change\n    if (curSec === getCurEndSecs()) {\n      // The two active states to increment or change state\n      // are Working or Resting. If neither or these states, do no work.\n      if (isWorking()) {\n        // End, if there are no more rounds and no last rest phase\n        if (curRound === rounds && !(restSecs > 0)) {\n          end();\n        } else if (restSecs > 0) {\n          // Otherwise, start resting\n          setStatus(STATUS.RESTING);\n          setCurSec(c => isCountASC ? 0 : restSecs);\n        } else {\n          // Otherwise, increment the round, and start working again\n          setCurRound(r => r + 1);\n          setCurSec(c => isCountASC ? 0 : workSecs);\n        }\n      } else if (isResting()) {\n        if (curRound === rounds) {\n          // No more rounds, end on this last rest phase\n          end();\n        } else {\n          // More rounds, increment round, and switch from resting to working\n          setStatus(STATUS.WORKING);\n          setCurSec(c => isCountASC ? 0 : workSecs);\n          setCurRound(r => r + 1);\n        }\n      } else {\n        // This will never happen :) ...but, in case it does, it's not invisible\n        console.error('Warning: the interval counter is active, but the Timer context is not in a working state');\n      }\n    } else if (isResting() || isWorking()) {\n      // Iterate the current seconds\n      setCurSec(c => isCountASC ? c + 1 : c - 1);\n    }\n  }\n  // Save the above Increment-end work function as the ref callback\n  savedCallback.current = callback;\n\n  // The function to start an interval counter\n  const _startInterval = () => {\n    // Safety check that existing interval is gone\n    _stopInterval();\n    interval.current = setInterval(() => {\n      return (savedCallback.current(), 1000);\n    }, 1000);\n  }\n  // The function to stop and clear the interval\n  const _stopInterval = () => {\n    if (interval.current) {\n      clearInterval(interval.current);\n      interval.current = null;\n    }\n  }\n  // Return the two interval functions\n  return { startInterval: _startInterval, stopInterval: _stopInterval }\n}\n\nexport default useIntervalHelper;\n","import React, {createContext, useState} from 'react';\n// Import helper\nimport useIntervalHelper from '../utils/useIntervalHelper';\nimport { STATUS, RUNNING_STATUS } from '../utils/constants';\n// Crete a Timer context with default empty\nexport const TimerContext = createContext({});\n/**\n * Create a context for the Timers\n */\nconst TimerProvider = ({children}) => {\n  // the current seconds state of the timer\n  const [curSec, setCurSec] = useState(0);\n  // the total work seconds for the timer\n  const [workSecs, setWorkSecs] = useState(0);\n  // the total rest seconds for the timer\n  const [restSecs, setRestSecs] = useState(0);\n  // the total number of rounds for the timer\n  const [rounds, setRounds] = useState(0);\n  // the current round state of the timer\n  const [curRound, setCurRound] = useState(0);\n  // Keep track if wasResting before pause\n  const [wasResting, setWasResting] = useState(0);\n  // The direction of the current counter, defaults ascending\n  const [isCountASC, setIsCountASC] = useState(false);\n  // the current running/puse/rest/reset state of the timer\n  const [status, setStatus] = useState(STATUS.RESET);\n  // Set up convinience functions\n  const isRunning = () => {\n    return RUNNING_STATUS.includes(status);\n  }\n  const isPaused = () => {\n    return status === STATUS.PAUSED;\n  }\n  const isEnded = () => {\n    return status === STATUS.ENDED;\n  }\n  const isReset = () => {\n    return status === STATUS.RESET;\n  }\n  const isResting = () => {\n    return status === STATUS.RESTING;\n  }\n  const isWorking = () => {\n    return status === STATUS.WORKING;\n  }\n  // Special case context for RESTing status, used for Tabata\n  // TODO: consider moving Workout/Restperiod/Countdown\n  // into a different param than status to remove this complexity\n  const isInRestingContext = () => {\n    return (\n      // the state is RESTING\n      isResting()\n      ||\n      // the state is PAUSED but the pause was for RESTING\n      (wasResting && isPaused())\n      ||\n      // the state is ENDED and timer default is to end on RESTING state\n      (restSecs > 0 && isEnded())\n    );\n  }\n\n  // This returns the current terminating second count\n  const getCurEndSecs = () => {\n    if (isResting() || isWorking()) {\n      return (isCountASC ? (isWorking() ? workSecs: restSecs) : 0);\n    } else if (wasResting) {\n      return (isCountASC ? (!wasResting ? workSecs: restSecs) : 0);\n    } else {\n      return (isCountASC ? (restSecs > 0 ? restSecs : workSecs) : 0);\n    }\n  }\n\n  const getCurStartSecs = () => {\n    if (isResting() || isWorking()) {\n      return (isCountASC ? 0 : (isWorking() ? workSecs: restSecs));\n    } else if (wasResting) {\n      return (isCountASC ? 0 : (!wasResting ? workSecs: restSecs));\n    } else {\n      return (isCountASC ? 0 : (restSecs > 0 ? restSecs : workSecs));\n    }\n  }\n\n  // -----  State change callback functions ---  //\n\n  const end = () => {\n    stopInterval();\n    // This fires off the fireworks!!\n    setStatus(STATUS.ENDED);\n    setWasResting(false);\n    setCurRound(rounds);\n    // Ending on work secs vs rest\n    setCurSec(isCountASC ? workSecs : 0);\n  }\n\n  const work = () => {\n    // If first start, initialize start seconds\n    setCurSec(isPaused ? curSec : (isCountASC ? workSecs : 0));\n    // If first start, initialize current round\n    setCurRound(curSec === 0 && rounds > 0 && curRound === 0 ? 1 : curRound);\n    // If was paused, set work status to either the work of resting or working\n    setStatus(wasResting ? STATUS.RESTING : STATUS.WORKING);\n    // Start the counter!\n    startInterval();\n  }\n\n  const pause = () => {\n    setWasResting(!isWorking());\n    setStatus(STATUS.PAUSED);\n    stopInterval();\n  }\n\n  const resetStart = () => {\n    stopInterval();\n    setStatus(STATUS.RESET);\n    setWasResting(false);\n    setCurSec(isCountASC ? 0 : workSecs);\n    setCurRound(rounds > 0 ? 1 : 0);\n  }\n\n  const resetAll = () => {\n    stopInterval();\n    setStatus(STATUS.RESET);\n    setWasResting(false);\n    setCurSec(0);\n    setWorkSecs(0);\n    setRestSecs(0);\n    setRounds(0);\n    setCurRound(0);\n  }\n\n  // Retrieve the Interval helper API\n  // Give it all it needs to manage context\n  // state between intervals.\n  // Passing as params to avoid cyclic dependency loop with context\n  const { startInterval, stopInterval } = useIntervalHelper({\n      isCountASC,\n      isWorking,\n      isResting,\n      workSecs,\n      restSecs,\n      curSec,\n      curRound,\n      rounds,\n      end,\n      setStatus,\n      setCurSec,\n      setCurRound,\n      status,\n      getCurEndSecs,\n    });\n\n  return (\n    // Expose global values to the timer children\n    <TimerContext.Provider\n      value={{\n         isCountASC,\n         setIsCountASC,\n         curSec,\n         setCurSec,\n         workSecs,\n         setWorkSecs,\n         restSecs,\n         setRestSecs,\n         rounds,\n         setRounds,\n         curRound,\n         setCurRound,\n         status,\n         work,\n         pause,\n         end,\n         resetStart,\n         resetAll,\n         isRunning,\n         isPaused,\n         isEnded,\n         isResting,\n         isWorking,\n         isReset,\n         isInRestingContext,\n         getCurStartSecs,\n       }}>\n      {children}\n    </TimerContext.Provider>\n  );\n}\n\nexport default TimerProvider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ color, size }) => {\n  const sizeMapped = sizeMapping[size];\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapped} color={color} />\n        <Dot size={sizeMapped} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapped} color={color} />\n        <Dot size={sizeMapped} color={color} />\n      </DotGroup>\n    </Container>\n  );\n}\n\n// Class description for the docs\nLoading.docs =   {\n    title: 'Loading spinner ',\n    component: <Loading />,\n    props: [\n      {\n        prop: 'size',\n        key: 'size',\n        description: \"Changes the size of the loading spinner\",\n        type: \"string\",\n        defaultValue: \"medium\",\n      },\n      {\n        prop: 'color',\n        key: 'color',\n        description: \"Changes the color of the loading spinner\",\n        type: \"string\",\n        defaultValue: primaryColor,\n      }\n    ]\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","/* CSS - Cascading Style Sheet */\n/* Palette color codes */\n/* Palette URL: http://paletton.com/#uid=34h0r1klhllaDvZfYqDqyg2vUaIklhllaDvZfYqDqyg2vUaIklhllaDvZfYqDqyg2vUaI */\n/* Feel free to copy&paste color codes to your application */\n/* As hex codes */\nconst COLOR = {\n  primary0: { color: '#433075' },\t/* Main Primary color */\n  primary1: { color: '#897BAF' },\n  primary2: { color: '#635192' },\n  primary3: { color: '#291758' }, /* Darkest */\n  primary4: { color: '#15073B' },\n  primaryLightest: {color: '#B8AFCF'},\n\n  secondary10: { color: '#AAAA39' },\t/* Main Secondary color (1) */\n  secondary11: { color: '#FFFFAA' },\n  secondary12: { color: '#D4D46A' },\n  secondary13: { color: '#808016' },\n  secondary14: { color: '#555500' },\n\n  secondary20: { color: '#AA8839' },\t/* Main Secondary color (2) */\n  secondary21: { color: '#FFE5AA' },\n  secondary22: { color: '#D4B56A' },\n  secondary23: { color: '#806016' },\n  secondary24: { color: '#553C00' },\n};\n\n// Define different component generic color sets\nconst GENERIC = {\n  COLOR,\n  BUTTON_COLORS:{\n    active: {\n      color: COLOR.primary4.color,\n      background: COLOR.secondary22.color,\n    },\n    inactive: {\n      color: COLOR.secondary21.color,\n      background: COLOR.primary3.color\n    },\n  },\n  DISPLAY_TIME: {\n    label: {\n      color: COLOR.primaryLightest.color,\n    },\n    active: {\n      color: COLOR.secondary11.color,\n    },\n    inactive: {\n      color: COLOR.secondary10.color,\n    },\n  },\n  DISPLAY_ROUNDS: {\n    active: {\n      color: COLOR.primary4.color,\n      background: COLOR.secondary10.color,\n    },\n    inactive: {\n      color: COLOR.secondary13.color,\n      background: COLOR.primary1.color,\n    },\n    resting: {\n      color: COLOR.primary1.color,\n      background: COLOR.primary3.color,\n    },\n    label: {\n      color: COLOR.primaryLightest.color,\n    }\n  },\n  INPUT: {\n    DEFAULT: {\n      color: COLOR.primary3.color,\n      background: COLOR.primaryLightest.color,\n    },\n    LABEL: {\n      color: COLOR.primaryLightest.color,\n    }\n  },\n  PANEL: {\n    DEFAULT:{\n      color: COLOR.primary0.color,\n      background: COLOR.primary1.color,\n    },\n    INPUT:{\n      background: COLOR.primary2.color,\n    },\n    DISPLAY:{\n      default: {background: COLOR.primary0.color},\n      ready: {background: COLOR.secondary12.color},\n      end: {background: COLOR.secondary14.color},\n    },\n    CONTROLS: {\n      background: COLOR.primary2.color,\n    },\n  }\n}\n\nexport default GENERIC;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nconst sizeMapping = {\n  // In pixels\n  small: 60,\n  medium: 80,\n  large: 100,\n  xlarge: 140,\n};\n\n// Make rounded corner button, but not as round as the RoundsDisplay\n// Add different style for hover and active (click) to emphasize user action\nconst ButtonStyled = styled.button`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: 60px;\n  margin: 7px;\n  text-align: center;\n  font-size: .9em;\n  text-decoration: none;\n  background-color: ${(props) => {\n    return GENERIC.BUTTON_COLORS[props.activeKey].background\n  }};\n  color: ${(props) => {\n    return GENERIC.BUTTON_COLORS[props.activeKey].color\n  }};\n  border: none;\n  border-radius: 10px;\n  &:hover {\n        outline: none;\n        box-shadow: 0px 0px 6px black;\n    };\n  &:active {\n        outline: none;\n        box-shadow: 0px 0px 2px red;\n        opacity: 0.8;\n    };\n`;\n\nconst Button = ({ active, text, onClick, size }) => {\n  const sizeMapped = sizeMapping[size];\n  return (\n      <ButtonStyled\n        size={sizeMapped}\n        type=\"Button\"\n        defaultValue={text}\n        value={text}\n        activeKey={ active ? 'active' : 'inactive' }\n        onClick={onClick}\n      >\n        {text}\n      </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n  // Indicates if this is a primary or secondary button\n  active: PropTypes.bool,\n  // The relative size of the button to display\n  size: PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']),\n  // The text to display in the button\n  text: PropTypes.string,\n  // The call back to use when the button is clicked\n  onClick: PropTypes.func.isRequired,\n};\n\nButton.defaultProps = {\n  actve: true,\n  size: 'medium',\n  text: 'Press',\n};\n\n// Class description for the docs\nButton.docs =   {\n    title: 'Button ',\n    component: <Button defaultValue=\"\" onClick={()=>{}} />,\n    props: [\n      {\n        prop: 'active',\n        key: 'active',\n        description: 'Wether this is the active button',\n        type: 'boolean',\n        defaultValue: String(Button.defaultProps.actve),\n      },\n      {\n        prop: 'size',\n        key: 'size',\n        description: \"Changes the size of the button\",\n        type: \"string\",\n        defaultValue: Button.defaultProps.size,\n      },\n      {\n        prop: 'text',\n        key: 'text',\n        description: 'The text to display on the button',\n        type: 'string',\n        defaultValue: Button.defaultProps.text,\n      },\n      {\n        prop: 'onClick',\n        key: 'onClick',\n        description: 'Callback for click event on button',\n        type: 'function',\n        defaultValue: 'none',\n      }\n    ]\n};\n\nexport default Button;\n","/**\n * Helper utilities\n */\n\n\n/**\n * Helper to convert seconds into display HH:MM:SS\n */\nexport  const getHmsDisplayFromSecs = (secs) => {\n  const getHrsFromSecs = (secs) => Math.floor(secs / (60 * 60));\n  const getMinRemainderFromSecs = (secs) =>  Math.floor(secs % (60 * 60) / 60);\n  const getSecRemainerFromSecs = (secs) =>  Math.floor(secs % (60 * 60) % 60);\n  const hr = `${('00' + getHrsFromSecs(secs)).slice(-2)}`;\n  const min = `${('00' + getMinRemainderFromSecs(secs)).slice(-2)}`;\n  const sec = `${('00' + getSecRemainerFromSecs(secs)).slice(-2)}`;\n  return `${hr}:${min}:${sec}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n// Import centralized Timer color\nimport GENERIC  from '../../shared/COLOR';\n// Import timer utlity function\nimport { getHmsDisplayFromSecs } from '../../utils/HelperFunctions';\n\nconst fontSizeMap = {\n  small: '.8em',\n  medium: '1em',\n  large: '3.4em',\n};\n\nconst Container = styled.div`\n  text-align: center;\n  font-size: ${(props) => props.size};\n  color: ${(props) => {\n    return GENERIC.DISPLAY_TIME[props.activeKey].color\n  }};\n`;\n\nconst Label = styled.span`\n  margin-right: 20px;\n  color: ${GENERIC.DISPLAY_TIME.label.color};\n`;\n\n/**\n * Display Time is used to show a time, either the active or total\n * number of seconds of the Timer. A Timer may use multiple DisplayTime\n * components to display different second sets.\n */\nconst DisplayTime = ({ seconds, label, active, size }) => {\n  // const seconds = 7446; //2hr, 4 min, 6 secs\n  const textSize = fontSizeMap[size];\n  return (\n    <Container\n      size={textSize}\n      activeKey={active ? 'active' : 'inactive'}\n    >\n      {!active && label && <Label>{label}</Label>}\n      { getHmsDisplayFromSecs(seconds) }\n    </Container >\n  );\n};\n\nDisplayTime.propTypes = {\n  // The number of seconds to display\n  seconds: PropTypes.number,\n  // The label to display before the time display\n  label: PropTypes.string,\n  // The relative display size to use\n  size: PropTypes.string,\n  // Wether this is the a primary display or secondary\n  active: PropTypes.bool,\n};\n\nDisplayTime.defaultProps = {\n  seconds: 0,\n  label: 'Work',\n  size: 'medium',\n  active: false,\n};\n\n// Class description for the docs\nDisplayTime.docs =   {\n    title: 'Display Time ',\n    component: <DisplayTime />,\n    props: [\n      {\n        prop: 'seconds',\n        key: 'seconds',\n        description: 'Changes the time diplayed',\n        type: 'integer',\n        defaultValue: DisplayTime.defaultProps.seconds,\n      },\n      {\n        prop: 'label',\n        key: 'label',\n        description: 'Optional label for display time',\n        type: 'string',\n        defaultValue: DisplayTime.defaultProps.label,\n      },\n      {\n        prop: 'active',\n        key: 'active',\n        description: 'Wether this is the active time display',\n        type: 'boolean',\n        defaultValue: String(DisplayTime.defaultProps.active),\n      },\n      {\n        prop: 'size',\n        key: 'size',\n        description: 'Size of display time',\n        type: 'string',\n        defaultValue: DisplayTime.defaultProps.size,\n      }\n    ]\n}\n\nexport default DisplayTime;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nconst primaryColor =  GENERIC.INPUT.DEFAULT.background;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  width: 330px;\n  background-color: ${GENERIC.PANEL.INPUT.background};\n`;\n\nconst InputStyled = styled.input`\n  flex: 1;\n  padding: 5px 10px;\n  width: 80px;\n  text-align: right;\n  text-decoration: none;\n  font-weight: bold;\n  color: ${GENERIC.INPUT.color};\n  background-color: ${primaryColor};\n  border-color: ${GENERIC.PANEL.INPUT.background};\n  border-width: medium;\n  border-radius: 20px;\n  margin-left: 10px;\n`;\n\nconst LabelStyled = styled.label`\n  flex: 1;\n  color: ${GENERIC.INPUT.LABEL.color};\n  text-align: right;\n`;\n/**\n * A Generic Input\n * The context of the input is controlled from the timer through\n * the timer's context provider.\n */\nconst Input = ({value, onChange, name, label, maxNum}) => {\n  return (\n    <InputContainer>\n      <LabelStyled\n        htmlFor={name}\n      >\n        {label}\n        :\n      </LabelStyled>\n      <InputStyled\n        id={name}\n        name={name}\n        type=\"number\"\n        min=\"0\"\n        max={maxNum}\n        onChange={onChange}\n        autocomplete=\"off\"\n        placeholder={0}\n        value={value}\n      />\n    </InputContainer>\n  )\n};\n\nInput.propTypes = {\n  // The input element name identifier to use\n  name: PropTypes.string,\n  // The display text to use for the input\n  label: PropTypes.string,\n  // The value to display in the input\n  value: PropTypes.number,\n  // The max number allowed in the input\n  maxNum: PropTypes.number,\n  // The callback to use when the input changes\n  onChange: PropTypes.func.isRequired,\n};\n\nInput.defaultProps = {\n  name: 'Input',\n  label: 'Input',\n  value: undefined,\n  maxNum: 86400, // 24 hours\n};\n\n\n// Class description for the docs\nInput.docs =   {\n    title: 'Input ',\n    component: <Input defaultValue=\"\" onChange={()=>{}} />,\n    props: [\n      {\n        prop: 'name',\n        key: 'name',\n        description: 'Name of input field',\n        type: 'string',\n        defaultValue: Input.defaultProps.name,\n      },\n      {\n        prop: 'label',\n        key: 'label',\n        description: 'label for input field',\n        type: 'string',\n        defaultValue: Input.defaultProps.label,\n      },\n      {\n        prop: 'value',\n        key: 'value',\n        description: 'Value of input field',\n        type: 'number from 0 to maxNum',\n        defaultValue: 'none',\n      },\n      {\n        prop: 'maxNum',\n        key: 'maxNum',\n        description: 'Maximum input number',\n        type: 'number',\n        defaultValue: Input.defaultProps.maxNum,\n      },\n      {\n        prop: 'onChange',\n        key: 'onChange',\n        description: \"Callback for change of input\",\n        type: \"function\",\n        defaultValue: 'none',\n      }\n    ]\n}\n\nexport default Input;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nimport { TimerContext } from \"../../context/TimerProvider\";\n\nconst sizeMapping = {\n  small: 20,\n  medium: 40,\n  large: 60,\n};\n\nconst Container = styled.div`\n  margin-top: 20px;\n  background-color: ${GENERIC.PANEL.DISPLAY.background};\n`;\n\nconst Round = styled.span`\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => {\n    return GENERIC.DISPLAY_ROUNDS[props.activeKey].background\n  }};\n  color: ${(props) => {\n    return GENERIC.DISPLAY_ROUNDS[props.activeKey].color\n  }};\n  border-radius: 100%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n`;\n\nconst RoundGroup = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:before {\n    content: \"Round\";\n    color: ${GENERIC.DISPLAY_ROUNDS.label.color};\n    padding-right:10px;\n  }\n`;\n\n/**\n * A functional component to display the current round\n * the timer is in in the context of the total number of rounds\n * The current round changes appearance if in a\n * resting context vs working context.\n */\nconst DisplayRounds = () => {\n  const {\n    rounds,\n    curRound,\n    isInRestingContext,\n  } = useContext(TimerContext);\n\n  // construct the round row\n  const dots = Array.from(Array(rounds), (e,i)=>i+1).map(i => {\n    const isCurRound = (i === curRound);\n    return (\n      <Round\n        size={isCurRound ? sizeMapping.large : sizeMapping.medium}\n        activeKey={\n          isCurRound\n          ? (isInRestingContext() ? 'resting' :'active')\n          : 'inactive'\n        }\n        key={i}\n      >\n        {isCurRound && curRound}\n      </Round>\n    );\n  })\n\n  return (\n    <Container>\n      <RoundGroup>\n        {dots}\n      </RoundGroup>\n    </Container>\n  );\n};\n\n// Class description for the docs\nDisplayRounds.docs =   {\n  title: 'Display rounds ',\n  component: <DisplayRounds />,\n  // No more props, all comes from context \n  props: [],\n};\n\nexport default DisplayRounds;\n","/**\n* ButtonPanel handles layout of the the button set\n*/\nimport React, {useContext} from \"react\";\nimport styled from \"styled-components\";\n\n// Import the data provider\nimport { TimerContext } from \"../../context/TimerProvider\";\n\nimport Button from \"./Button\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\n\nconst ButtonPanel = () => {\n  const {\n    work,\n    pause,\n    end,\n    resetStart,\n    resetAll,\n    isPaused,\n    isRunning,\n    isReset,\n  } = useContext(TimerContext);\n\n  // All timers use these two buttons\n  // The Reset button handles ending, reseting to start, or clearing all state\n  const resetButtonFunc = isRunning() ? end : (isReset() ? resetAll : resetStart);\n  // the Work button handles pausing and playing the timer\n  const workButtonFunc = isRunning() ? pause : work;\n\n  return (\n    <Container>\n      <Button\n        size='large'\n        active={false}\n        text={(isRunning() ? 'End' : (isReset() ? 'Clear' : 'Reset'))}\n        onClick={resetButtonFunc}\n      />\n      <Button\n        size='large'\n        active={true}\n        text={(isRunning() ? 'Pause' : (isPaused() ? 'Resume' : 'Start'))}\n        onClick={workButtonFunc}\n      />\n    </Container>\n  )\n};\n\n// Class param description for the docs\nButtonPanel.docs =   {\n  title: 'ButtonPanel ',\n  component: <ButtonPanel  onClick={()=>{}} />,\n  // No more props, gets it all from context\n  props: [],\n}\n\nexport default ButtonPanel;\n","/**\n * Panel handles layout of the components of the timer\n */\n import React, {useContext} from \"react\";\n import styled from \"styled-components\";\n\n // Import component\n import ButtonPanel from \"./ButtonPanel\";\n\n // Import the data provider\n import { TimerContext } from \"../../context/TimerProvider\";\n\n //import constants and shared\n import GENERIC  from \"../../shared/COLOR\";\n\n const primaryColor =  GENERIC.PANEL.DEFAULT.background;\n\n const PanelStyle = styled.div`\n   display: flex;\n   flex-direction: column;\n   justify-content: center;\n   height: 85vh;\n   width: 500px;\n   /* Using Gill Sans because it's fun, easy to read, and emits energy */\n   font-family: \"Gill Sans\", sans-serif;\n   background-color: ${primaryColor};\n   color: ${GENERIC.PANEL.DEFAULT.color};\n`;\n\nconst TitleContainer = styled.div`\n  color: ${GENERIC.PANEL.INPUT.background};\n  background-color: ${GENERIC.BUTTON_COLORS.inactive.background};\n  padding: 20px 20px 30px;\n  font-size: 3em;\n  font-weight: bold;\n  text-align: center;\n`;\n//   padding: 40px 2px;\n const InputsContainer = styled.div`\n   color: ${GENERIC.PANEL.INPUT.color};\n   background-color: ${GENERIC.PANEL.INPUT.background};\n   min-height: 20%;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n`;\n\n  const DisplayContainer = styled.div`\n    background-color: ${(props) => {\n      return GENERIC.PANEL.DISPLAY[props.bg].background\n    }};\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    justify-content: center;\n    padding: 60px 60px 20px;\n    flex-grow: 1;\n  `;\n\n  const ControlsContainer = styled.div`\n    background-color: ${GENERIC.PANEL.CONTROLS.background};\n    padding: 20px 40px;\n  `;\n\n  /**\n   * the Panel function\n   */\n const Panel = ({\n   timerTitle,\n   inputs,\n   displayTimes,\n   displayRound,\n }) => {\n   // The inputs are only shown in the RESET state.\n   // The inputs are hidden when the timer is running or paused.\n   const {\n     isReset,\n     curSec,\n     isEnded,\n     isRunning,\n     getCurStartSecs,\n   } = useContext(TimerContext);\n\n   // Change color depending on state\n   const displayColorKey = (\n     // If start of Timer, or inbetween rounds\n     isRunning() && curSec === getCurStartSecs()\n     ? 'ready'\n     // If ended or in the middle of a count\n     : (isEnded() ? 'end' : 'default' )\n    );\n\n    return (\n     <PanelStyle>\n      <InputsContainer>\n        {(isReset() && inputs)}\n      </InputsContainer>\n      <DisplayContainer bg={displayColorKey}>\n          {displayTimes}\n          {displayRound}\n      </DisplayContainer>\n      <ControlsContainer>\n        <ButtonPanel/>\n      </ControlsContainer>\n      <TitleContainer>\n        {timerTitle}\n      </TitleContainer>\n     </PanelStyle>\n   );\n };\n\n // Class description for the docs\n Panel.docs =   {\n     title: 'Panel ',\n     component: <Panel onClick={()=>{}} timerTitle=\"Panel\" />,\n     props: [\n       {\n         prop: 'timerTitle',\n         key: 'timerTitle',\n         description: \"The name of the timer\",\n         type: \"String\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'inputs',\n         key: 'inputs',\n         description: \"An array of Input objects\",\n         type: \"[Input]\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'displayRound',\n         key: 'displayRound',\n         description: \"A DisplayRound object\",\n         type: \"DisplayRound\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'displayTimes',\n         key: 'displayTimes',\n         description: \"An Array of DisplayTimes objects\",\n         type: \"[DisplayTimes]\",\n         defaultValue: \"none\",\n       }\n     ]\n }\n\n export default Panel;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport TimerProvider from \"../context/TimerProvider\";\n\n// Components to describe\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport Input from \"../components/generic/Input\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Panel from \"../components/generic/Panel\";\nimport ButtonPanel from \"../components/generic/ButtonPanel\";\n\n// The list of components to Describe\nconst DocList = [Loading, DisplayTime, Input, DisplayRounds, Button, ButtonPanel, Panel];\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  width: 80%;\n`;\n\nconst Documentation = () => {\n  // compomose the component elements\n  const components = DocList.map(CurrComp => {\n    const {title, component, props} = CurrComp.docs;\n    return (\n      <DocumentComponent\n        key={title}\n        title= {title}\n        component={component}\n        propDocs={props}\n      />\n    )\n  })\n  return (\n    <Container>\n      <TimerProvider>\n        {components}\n      </TimerProvider>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import {useContext, useEffect, useRef} from \"react\";\nimport { TimerContext } from \"../context/TimerProvider\";\n\n/**\n * Custom hook to reset all state when a Timer unloads\n */\nconst useResetCallback = () => {\n  const { resetAll } = useContext(TimerContext);\n  // Create a reset ref\n  const resetCallback = useRef(() => {\n    resetAll();\n  });\n\n  // On unload reset all timer context\n  useEffect(() => {\n    return () => {\n      resetCallback.current();\n    };\n  },[resetCallback]);\n\n  // Set the current callback ref\n  resetCallback.current = () => {\n    resetAll();\n  }\n}\nexport default useResetCallback;\n","import { useContext } from \"react\";\nimport { TimerContext } from \"../context/TimerProvider\";\n\n/**\n * A fun component to drop confetti all over the view\n * to celebrate the end of a timer.\n * from https://www.npmjs.com/package/react-confetti\n */\nimport Confetti from 'react-confetti';\n\n/**\n * Custom hook return the confetti end effect when state is ended\n */\nconst useEndedEffect = () => {\n  const {\n    isEnded,\n   } = useContext(TimerContext);\n\n  if (isEnded()) {\n    return (<Confetti />);\n  };\n\n}\nexport default useEndedEffect;\n","import React, {useContext, useEffect } from \"react\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Hook to reset all state when component unloads\nimport useResetCallback from \"../../utils/useResetCallback\";\n// Hook to show a fun effect when timer ends\nimport useEndedEffect from '../../utils/useEndedEffect';\n\n/**\n * Stopwatch functional component\n * Has one input and a display that counts up\n * and a display that shows the ending time.\n */\nconst Stopwatch = () => {\n  const timerTitle = \"Stopwatch\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    setIsCountASC,\n  } = useContext(TimerContext);\n\n  // Hook to reset all state when component unloads;\n  useResetCallback();\n\n  // Create input components\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        if (event && event.target) {\n          const num = parseInt(event.target.value);\n          setWorkSecs((num > 0 ? num : 0));\n        }\n      }}\n      key=\"input-total-seconds\"\n      label=\"End seconds\"\n      name=\"seconds\"\n      value={workSecs}\n    />\n  ];\n  // Create Display Time components\n  // Stop watch shows 2 display times, the count up and end time\n  const displayTimes = [\n    <DisplayTime\n      label=\"Total\"\n      seconds={workSecs}\n      active={false}\n      key=\"display-total-seconds\"\n    />,\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-current-seconds\"\n    />\n  ];\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(true);\n  }, [setIsCountASC]);\n\n  // The Return Rendered componet\n  return (\n    <div>\n      <Panel\n        displayTimes={displayTimes}\n        timerTitle={timerTitle}\n        inputs={inputs}\n      />\n      {useEndedEffect()}\n    </div>\n  );\n}\n\nexport default Stopwatch;\n","import React, { useContext, useEffect } from 'react';\nimport { TimerContext } from '../../context/TimerProvider';\n// Import components\nimport Panel from '../generic/Panel';\nimport Input from '../generic/Input';\nimport DisplayTime from '../generic/DisplayTime';\n// Hook to reset all state when component unloads\nimport useResetCallback from '../../utils/useResetCallback';\n// Hook to show a fun effect when timer ends\nimport useEndedEffect from '../../utils/useEndedEffect';\n\n/**\n * Countdown functional component\n * Has one input and one display that counts down.\n */\nconst Countdown = () => {\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    setCurSec,\n    setIsCountASC,\n  } = useContext(TimerContext);\n\n  // Hook to reset all state when component unloads;\n  useResetCallback();\n\n  const timerTitle = 'Countdown';\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        // The number of seconds to count down\n        setWorkSecs((num > 0 ? num : 0));\n        // Setting Cur sec to start at the total for countdown\n        setCurSec((num > 0 ? num : 0));\n      }}\n      label='Seconds'\n      name='seconds'\n      value={workSecs}\n      key='input-total-seconds'\n    />\n  ];\n  // Countdown displays the single count down time\n  const displayTimes = [\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key='display-current-seconds'\n    />\n  ]\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(false);\n  }, [setIsCountASC]);\n\n  return (\n    <div>\n      <Panel\n          timerTitle={timerTitle}\n          inputs={inputs}\n          displayTimes={displayTimes}\n      />\n      {useEndedEffect()}\n    </div>\n  );\n}\n\nexport default Countdown;\n","import React, {useContext, useEffect } from \"react\";\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport DisplayTime from \"../generic/DisplayTime\";\n\n// Hook to reset all state when component unloads\nimport useResetCallback from \"../../utils/useResetCallback\";\n// Hook to show a fun effect when timer ends\nimport useEndedEffect from '../../utils/useEndedEffect';\n\n/**\n * XY functional component\n * Has two inputs, one for rounds, and one for work seconds per round.\n * Has two time displays to show ending secs for the current round and current\n * seconds.\n * Has a rounds display that shows the current round.\n */\nconst XY = () => {\n  const timerTitle = \"XY\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    rounds,\n    setRounds,\n    setIsCountASC,\n  } = useContext(TimerContext);\n  // Hook to reset all state when component unloads;\n  useResetCallback();\n\n  // The Array of inputs used in this timer\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        // The number of seconds per round\n        setWorkSecs((num > 0 ? num : 0));\n      }}\n      label=\"Seconds\"\n      name=\"work\"\n      value={workSecs}\n      key=\"input-total-work-seconds\"\n    />,\n     <Input\n     onChange={(event) => {\n       const num = parseInt(event.target.value);\n       // The number of rounds\n       setRounds((num > 0 ? num : 0));\n     }}\n      label=\"Rounds\"\n      name=\"rounds\"\n      value={rounds}\n      key=\"input-total-rounds\"\n    />\n  ];\n  // The Array of diplays used in this timer\n  const displayTimes = [\n    <DisplayTime\n      seconds={workSecs}\n      active={false}\n      key=\"display-total-time\"\n    />,\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-countdown-time\"\n    />\n  ]\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(true);\n  }, [setIsCountASC]);\n\n  return (\n    <div>\n      <Panel\n          timerTitle={timerTitle}\n          displayRound={(<DisplayRounds/>)}\n          inputs={inputs}\n          displayTimes={displayTimes}\n      />\n      {useEndedEffect()}\n    </div>\n  );\n}\n\nexport default XY;\n","import React, {useContext, useEffect } from \"react\";\n\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\n\n// Hook to reset all state when component unloads\nimport useResetCallback from \"../../utils/useResetCallback\";\n// Hook to show a fun effect when timer ends\nimport useEndedEffect from '../../utils/useEndedEffect';\n\n/**\n * Tabata functional component\n * Has three inputs, one for rounds, rest secs, work secs.\n * Has two time displays to show ending secs for the current round and current\n * seconds.\n * Has a rounds display that shows the current round.\n */\nconst Tabata = () => {\n  const timerTitle = \"Tabata\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    restSecs,\n    setRestSecs,\n    rounds,\n    setRounds,\n    setIsCountASC,\n    isInRestingContext,\n  } = useContext(TimerContext);\n  // Hook to reset all state when component unloads;\n  useResetCallback();\n\n  // The amount of total secs in current Tabata segment\n  const seconds =  isInRestingContext() ? restSecs : workSecs;\n  const label = isInRestingContext() ? 'Rest' : 'Work';\n\n  const inputs = [\n    <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        setWorkSecs((num > 0 ? num : 0));\n      }}\n      label=\"Work seconds\"\n      name=\"Work\"\n      value={workSecs}\n      key=\"input-total-work-seconds\"\n    />,\n    <Input\n     onChange={(event) => {\n       const num = parseInt(event.target.value);\n       setRestSecs((num > 0 ? num : 0));\n     }}\n     label=\"Rest seconds\"\n     name=\"rest\"\n     value={restSecs}\n     key=\"input-total-rest-seconds\"\n   />,\n   <Input\n    onChange={(event) => {\n      const num = parseInt(event.target.value);\n      setRounds((num > 0 ? num : 0));\n    }}\n    label=\"Rounds\"\n    name=\"rounds\"\n    value={rounds}\n    key=\"input-total-rounds\"\n    />\n  ];\n  // Countdown displays the single count down time\n  const displayTimes = [\n    <DisplayTime\n      label={label}\n      seconds={seconds}\n      key=\"display-total-time\"\n      active={false}\n    />,\n    <DisplayTime\n      label='a'\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-countdown-time\"\n    />\n  ];\n\n    // Set static timer direction state on load\n    useEffect(() => {\n      setIsCountASC(true);\n    }, [setIsCountASC]);\n\n    // Render!\n    return (\n      <div>\n        <Panel\n            timerTitle={timerTitle}\n            inputs={inputs}\n            displayTimes={displayTimes}\n            displayRound={(<DisplayRounds/>)}\n        />\n        {useEndedEffect()}\n      </div>\n    );\n}\n\nexport default Tabata;\n","import React, {useState} from \"react\";\n\nimport styled from \"styled-components\";\n\n// Import the timers\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\n// Use button for timer choices\nimport Button from \"../components/generic/Button\";\n\n// Common color for default timer background\nimport GENERIC  from \"../shared/COLOR\";\nconst primaryColor =  GENERIC.PANEL.DEFAULT.background;\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TimerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: start;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  margin: 20px 0 20px;\n  border-radius: 20%;\n  overflow: hidden;\n  height: 80%;\n  min-width: 500px;\n  min-height: 700px;\n  background-color: ${primaryColor};\n`;\n\nconst MenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 30px;\n  margin-top: 120px;\n`;\n\nfunction App() {\n  //const curTimer = useRef(undefined);\n  const [curTimer, setCurTimer] = useState(0);\n\n  const timers = [\n    { title: \"Stopwatch\", C: <Stopwatch /> },\n    { title: \"Countdown\", C: <Countdown /> },\n    { title: \"XY\", C: <XY /> },\n    { title: \"Tabata\", C: <Tabata /> },\n  ]\n\n  // previous timer end, current timer load? via effect?\n  const chooseTimer = (timer) => {\n    setCurTimer(timer);\n  };\n\n  const timerElems = timers.map(timer => {\n    return (\n      <Button\n        key={timer.title}\n        size='xlarge'\n        active={curTimer.title === timer.title}\n        text={timer.title}\n        onClick={() => chooseTimer(timer)}\n      />\n    )\n  })\n\n  return (\n    <Timers>\n      <TimerContainer>\n        <MenuContainer>\n          {timerElems}\n        </MenuContainer>\n        { !!curTimer ? (\n          <Timer>\n            {curTimer.C}\n          </Timer>\n        ) : (\n          <Timer/>\n        )\n      }\n      </TimerContainer>\n    </Timers>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n// Timer Provider\nimport TimerProvider from \"./context/TimerProvider\";\n\n// import shared color\nimport GENERIC  from \"./shared/COLOR\";\n\n// StyledLink\n// Inspired by Feb 28 blog post by Ridhik Govind\n// https://dev.to/ridhikgovind/how-to-style-your-react-router-links-using-styled-components-2350\nconst StyledLink = styled(Link)`\n  color: ${GENERIC.BUTTON_COLORS.inactive.background};\n  text-decoration: none;\n  font-size: 2em;\n  font-weight: bold;\n  margin: 1rem;\n  display: inline-block;\n  &:hover {\n    color: ${GENERIC.PANEL.DEFAULT.background};\n  }\n`;\n\nconst StyledNav = styled.div`\n  margin: auto;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n  font-size: 1.4rem;\n  /* Using Gill Sans because it's fun, easy to read, and emits energy */\n  font-family: \"Gill Sans\", sans-serif;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <StyledNav>\n            <StyledLink to=\"/\">Timers</StyledLink>\n            <StyledLink to=\"/docs\">Documentation</StyledLink>\n          </StyledNav>\n        </nav>\n        <Switch>\n          <Route path=\"/docs\">\n            <DocumentationView />\n          </Route>\n          <Route path=\"/\">\n            <TimerProvider>\n              <TimersView />\n            </TimerProvider>\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}